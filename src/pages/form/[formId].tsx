import type { GetServerSidePropsContext } from "next/types";

export function getServerSideProps(context: GetServerSidePropsContext) {
  return {
    props: {
      formId: context.query.formId,
    },
  };
}

import { useEffect, useRef, useState } from "react";
import { signOut, useSession } from "next-auth/react";
import Head from "next/head";
import SignIn from "../signIn";
import { api } from "~/utils/api";
import { faPlus } from "@fortawesome/free-solid-svg-icons";
import { FontAwesomeIcon } from "@fortawesome/react-fontawesome";
import { useSearchParams } from "next/navigation";
import FormView from "~/formView";

type inputType = "text" | "radio" | "checkbox";
type questionModel = {
  id: number;
  question: string;
  inputType: inputType;
  response: string | object;
};

type FormDetailsProps = {
  formId: string;
};
const Form: React.FC<FormDetailsProps> = ({ formId }) => {
  const { mutate: createFormMutate } = api.form.createForm.useMutation();
  const [searchParams, setSearchParams] = useSearchParams();
  const [existFormData, setExistFormData] = useState<object>();
  const [name, setName] = useState<string>();
  const [showAddOptions, setShowAddOptions] = useState(false);
  const [questionData, setQuestionData] = useState<questionModel[]>([
    {
      id: 0,
      question: "Question 1",
      inputType: "text",
      response: "",
    },
  ]);

  console.log(formId);

  const {
    data: existForm,
    isLoading,
    isSuccess,
  } = api.form.getSpecificForm.useQuery({
    formId: formId!,
  });
  if (isSuccess) {
    setExistFormData(existForm!);
  }

  const { data: sessionData } = useSession();
  if (sessionData == null) {
    return <SignIn />;
  }
  function addQuestion(type: inputType) {
    setShowAddOptions(false);
    let questionNumber = questionData.length + 1;
    if (type == "text") {
      setQuestionData((prevArr) => [
        ...prevArr,
        {
          id: questionNumber - 1,
          question: `Question ${questionNumber}`,
          inputType: "text",
          response: "",
        },
      ]);
    } else if (type == "radio") {
      setQuestionData((prevArr) => [
        ...prevArr,
        {
          id: questionNumber - 1,
          question: `Question ${questionNumber}`,
          inputType: "radio",
          response: "",
        },
      ]);
    } else if (type == "checkbox") {
      setQuestionData((prevArr) => [
        ...prevArr,
        {
          id: questionNumber - 1,
          question: `Question ${questionNumber}`,
          inputType: "checkbox",
          response: "",
        },
      ]);
    }
  }

  function mutateQuestion(
    questionId: number,
    questionOrResponse: "question" | "response",
    data: string | object,
  ) {
    setQuestionData((prevArr) => {
      const newArray = [...prevArr];

      if (questionOrResponse == "question" && typeof data != "object") {
        newArray[questionId]!.question = data;
      } else {
        newArray[questionId]!.response = data;
      }

      return newArray;
    });
  }

  if (isLoading) {
    return <div>Loading...</div>;
  }

  return (
    <>
      <Head>
        <title>Form</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className="flex min-h-screen flex-col items-center font-sans">
        <div className="flex w-full bg-gray-200 py-3">
          <div className="flex w-1/2 items-center justify-start">
            <a
              href="/"
              className="mx-3 h-10 rounded-lg bg-blue-600 px-2 py-1 font-serif text-white"
            >
              Home
            </a>
            <img
              src={sessionData.user.image!}
              className="h-14 w-14 rounded-full"
              alt="Profile Picture"
            />
          </div>
        </div>
        {isLoading ? <div>Loading...</div> : <FormView formData={existForm} />}
      </main>
    </>
  );
};

export default Form;
